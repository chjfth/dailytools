<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildThisFileDirectory)..\VSPG.Team.props" Condition="exists('$(MSBuildThisFileDirectory)..\VSPG.Team.props')" />
  <Import Project="$(MSBuildThisFileDirectory)..\VSPG.Personal.props" Condition="exists('$(MSBuildThisFileDirectory)..\VSPG.Personal.props')" />

  <Import Project="$(MSBuildProjectDirectory)\VSPG.Team.props" Condition="exists('$(MSBuildProjectDirectory)\VSPG.Team.props')" />
  <Import Project="$(MSBuildProjectDirectory)\VSPG.Personal.props" Condition="exists('$(MSBuildProjectDirectory)\VSPG.Personal.props')" />

  <!-- Define some variables to use later. -->

  <!-- Note: Only after Microsoft.Cpp.targets is imported, $(TargetFileName) and $(TargetName) is filled with values. -->
  <PropertyGroup>
    <ExportEnvvarsForVSPG>
      set "PlatformShortName=$(PlatformShortName)"
      set "PlatformToolsetVersion=$(PlatformToolsetVersion)"
      set "PlatformToolset=$(PlatformToolset)"
      set "ProjectName=$(ProjectName)"
      set "SolutionDir=$(SolutionDir.TrimEnd('\'))"
      set "ProjectDir=$(ProjectDir.TrimEnd('\'))"
      set "Configuration=$(Configuration)"
      set "BuildConf=$(Configuration)"
      set "PlatformName=$(PlatformName)"
      set "OutDir=$(TargetDir.TrimEnd('\'))"
      set "TargetDir=$(TargetDir.TrimEnd('\'))"
      set "ExeDllDir=$(TargetDir.TrimEnd('\'))"
      set "TargetFileName=$(TargetFileName)"
      set "TargetFileNam=$(TargetFileName)"
      set "TargetName=$(TargetName)"
      set "TargetExt=$(TargetExt)"
      set "IntDir=$(IntDir.TrimEnd('\'))"
      set "IntrmDir=$(IntDir.TrimEnd('\'))"
      $(ExportEnvvarsForVSPG_Team)
      $(ExportEnvvarsForVSPG_Personal)
    </ExportEnvvarsForVSPG>

  </PropertyGroup>

  <!-- Define VSPG's Prebuild target -->

  <Target Name="VSPG_PreBuild" BeforeTargets="PreBuildEvent">
    <Exec Command='$(ExportEnvvarsForVSPG) call "$(VSPG_BootsDir_NoTBS)\VSPG-Boots.bat" VSPG-PreBuild.bat'
    	WorkingDirectory="$(ProjectDir.TrimEnd('\'))"
    	IgnoreStandardErrorWarningFormat="true" 
    	/>
  </Target>

  <!-- Define VSPG's Postbuild target -->

  <Target Name="VSPG_PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command='$(ExportEnvvarsForVSPG) call "$(VSPG_BootsDir_NoTBS)\VSPG-Boots.bat" VSPG-PostBuild.bat'
    	WorkingDirectory="$(ProjectDir.TrimEnd('\'))"
    	IgnoreStandardErrorWarningFormat="true" 
    	/>
  </Target>

  <!-- A "Clean" Target that will invoke VSPU-CopyOrClean.bat to delete "output" files.  -->

  <Target Name="VSPG_Clean" AfterTargets="Clean">
    <Exec Command='$(ExportEnvvarsForVSPG) call "$(VSPG_BootsDir_NoTBS)\VSPG-Boots.bat" VSPG-CleanProject.bat'
    	WorkingDirectory="$(ProjectDir.TrimEnd('\'))"
    	IgnoreStandardErrorWarningFormat="true" 
    	/>
  </Target>

  <!-- ====================================================================== -->
  <!-- A MSBuild Target to diagnose variables.                                -->
  <!--   msbuild xxx.vcxproj /p:showvars="TargetName;TargetPath"              -->
  <!-- Or,                                                                    -->
  <!--   assign <showvars> in VSPG.Teams.props or VSPG.Personal.props .       -->
  <!-- ====================================================================== -->

  <ItemGroup>
    <ShowVars Include="$(showvars)" />
  </ItemGroup>

  <Target Name="VSPG_ShowVars" Condition="'$(showvars)'!=''" BeforeTargets="PrepareForBuild">
    <Message Text="================ [[VSPG_ShowVars]] start ================" />
    <Message Text="    %(showvars.Identity)=$(%(showvars.Identity))" />
    <Message Text="================ [[VSPG_ShowVars]] end ================" />
  </Target>

</Project>
