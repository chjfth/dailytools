[2020-09-22]

VSPG is Visual Studio Project Pre-build/Post-build Generic processing framework.
It can ease the deployment of many Pre-build/Post-build actions for us.

A typical scenario is: You want your output EXE/DLL to be copied to a remote machine, 
F5 to start remote debugging immediately, and do it robustly.

Features:
* Robust. All errors in .bat are reported and cause project-build(F7) to fail.
* Easy to deploy. 
* Be little intrusive, so we can apply it team-wide.
* Extensibility. You can customize your own Pre-build/Post-build commands and
  hook them into the VSPG and they get all benefits from VSPG as in the framework.
* Co-existence of many Pre-build/Post-build actions sub-bats is not a problem.

==== How to deploy? ====

The key is to know how to "bootstrap" these .bat files. To do this, we need to 
configure Visual Studio project (.vcxproj or .csproj) to execute the 
_VSPG\VSPG-StartBat9_.bat at its Pre-build stage and/or Post-build stage. 

See "Bootstrapping Best Practice" section below.

Please be clear: Merely Bootstrapping VSPG in your .vcxproj/.csproj
will not actually change the project-building behavior, so it does not affect
your team fellows on another svn/git sandbox as if VSPG is hidden.

For example, VSIDE's project-building behavior changes only after you make a copy of 
PostBuild-SyncOutput4.bat.sample to PostBuild-SyncOutput4.bat in your own sandbox. So,
PostBuild-SyncOutput4.bat is your personal stuff to tune/tweak, catering 
your personal need(copy output EXE to a remote machine for live debugging etc).

On the other hand, if you want VSPG to work for all your team members, you can 
write commands in Team-Prebuild8.bat and/or Team-Postbuild8.bat and check them into
svn/git server. These very two .bat filenames are checked explicitly by VSPG 
framework code, so in user's perspective, their existence is enough to take effect.

==== Bootstrapping Best Practice (for vcxproj) ====

A versed Visual Studio user knows that setting Pre-build/Post-build commands 
from VSIDE is very cumbersome, because you have to set them in each .vcxproj, 
each Release/Debug variant, each x86/x64 variant, so many repetitive copy/paste. 

Luckily, there is a best practice in importing VSPG into Visual Studio project 
build-flow. I call this import action "bootstrapping".

[STEP 1] Copy the whole _VSPG directory to your own project.

Please keep the directory name _VSPG intact. Aside from that, you can place it 
anywhere you like.

Note: User should not modify .bat files inside [boots] subdir, because files there
are considered internal to VSPG.

Assume that you place it inside $(SolutionDir), i.e. side-by-side with your .sln file.

[STEP 2] Open foo.vcxproj in a text editor, at near-end of the file, 
right before the closing </Project> tag, add content:

  <!-- import VSPG start -->
  <PropertyGroup>
    <VSPG_BootsDir_NoTBS>$(SolutionDir)_VSPG\boots</VSPG_BootsDir_NoTBS>
  </PropertyGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(VSPG_BootsDir_NoTBS)\_VSPG.props" />
  </ImportGroup>
  <!-- import VSPG end -->

(hint: _NoTBS means No Trailing BackSlash)

so the end of a foo.vcxproj looks like this:

...
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
  
  <!-- import VSPG start -->
  <PropertyGroup>
    <VSPG_BootsDir_NoTBS>$(SolutionDir)_VSPG\boots</VSPG_BootsDir_NoTBS>
  </PropertyGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(VSPG_BootsDir_NoTBS)\_VSPG.props" />
  </ImportGroup>
  <!-- import VSPG end -->
</Project>

This step defines a MSBuild variable named VSPG_BootsDir_NoTBS telling where 
you have placed the _VSPG\boots folder, so that _VSPG.props will be automatically
imported into VSIDE when you open that project.

Of course, you can place _VSPG folder at other places, just change VSPG_BootsDir_NoTBS's
directory-prefix accordingly. If you want to use relative dir-prefix, that's OK and 
it is relative to $(ProjectDir), that is where <foobar>.vcxproj resides.

To verify: Open .vcxproj and goto Property Manager, and you should see "_VSPG.props"
is listed as a property-sheet, side-by-side with "Microsoft.Cpp.Win32.user",
"Core Windows Libraries" etc.

[STEP 3] Repeat STEP 2 for each .vcxproj of your interest.

OK now, with above minor manual tweak of .vcxproj, we have applied VSPG project-wide,
that is, x86/x64, Debug/Release configuration variants all receive VSPG's benefits.

~~~~

[STEP _Z_] One Caveat:

Once you Import _VSPG.props, you should let it take care of the project-global 
<PreBuildEvent> and <PostBuildEvent>. That means, you MUST NOT provide your own 
<PreBuildEvent> and <PostBuildEvent> in vcxproj. Otherwise, yours will probably
overwrite that of VSPG's. If you really have your own Pre-build/Post-build
actions to do, there is a suitable place for them, that is, you hook yours into 
VSPG framework, by creating one or more of the following:

	Team-Prebuild8.bat 
	Personal-Prebuild8.bat 
	Team-Postbuild8.bat 
	Personal-Postbuild8.bat 

VSPG will search for these files in three-tiers of folders:
	(1) %ProjectDir%\_VSPG
	(2) %SolutionDir%\_VSPG
	(3) the [boots] directory
	
