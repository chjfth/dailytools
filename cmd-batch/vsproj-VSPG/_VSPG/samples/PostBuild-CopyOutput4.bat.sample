@echo off
setlocal EnableDelayedExpansion
set batfilenam=%~n0%~x0
set batdir=%~dp0
set batdir=%batdir:~0,-1%
set _vspgINDENTS=%_vspgINDENTS%.
call :Echos START from %batdir%

REM
set BuildConf=%~1
set _BuildConf_=%1
set PlatformName=%~2
set _ExeDllDir_=%3
set ExeDllDir=%~3
set TargetName=%~4

REM == debugging purpose ==
REM call :EchoVar _BuildConf_
REM call :EchoVar BuildConf
REM call :EchoVar PlatformName
REM call :EchoVar _ExeDllDir_
REM call :EchoVar ExeDllDir
REM call :EchoVar TargetName

REM ==== Prelude Above ====

REM =========================================================================
REM This bat copies(=sync) project output(EXE/DLL etc) to your desired target dirs.
REM 
REM After duplicating your own PostBuild-SyncOutput4.bat, you should 
REM customize two things: 
REM (1) Set POSTBUILD_COPY_TO_DIRS's value to be your copying target dirs.
REM     You can list multiple target dirs, separated by spaces.
REM     For example, assign two remote machine folders for remote debugging:
REM 
REM set POSTBUILD_COPY_TO_DIRS=z:\bin "y:\bin outputs"
REM
REM (2) Tell what file patterns to copy, separate each pattern by a space.
REM     (But don't surround them with quotes.)
REM
REM set POSTBUILD_COPY_PATTERNS=*.exe *.dll
REM or
REM set POSTBUILD_COPY_PATTERNS=%ExeDllDir%\%TargetFilenam% "some other pattern with white-space chars"
REM 
REM You can modify .bat files directly, or set them as env-vars.
REM =========================================================================

if not defined POSTBUILD_COPY_TO_DIRS (
	call :Echos POSTBUILD_COPY_TO_DIRS is empty, nothing to copy.
	exit /b 0
)

if not defined POSTBUILD_COPY_PATTERNS (
	call :Echos [ERROR] POSTBUILD_COPY_PATTERNS is empty.
	exit /b 4
)

for %%d in (%POSTBUILD_COPY_TO_DIRS%) do (

	set d_final=%%~d\__%BuildConf%\%PlatformName%
	if not exist "!d_final!" ( 
		mkdir "!d_final!"
		if errorlevel 1 (
		  REM This can happen if user assigns a dir with non-existing driver letter.
		  call :Echos [ERROR] Cannot create directory "!d_final!" .
		  exit /b 4
		)
	)
	
	call :CopyFilePatterns "%ExeDllDir%" "!d_final!" %POSTBUILD_COPY_PATTERNS%
	if errorlevel 1 ( 
		call :Echos [ERROR] Error occurred when copying file to "!d_final!" .
		exit /b 4 
	)
)


exit /b 0


REM =============================
REM ====== Functions Below ======
REM =============================

:Echos
  REM This function preserves %ERRORLEVEL% for the caller,
  REM and, LastError does NOT pollute the caller.
  setlocal & set LastError=%ERRORLEVEL%
  echo %_vspgINDENTS%[%batfilenam%] %*
exit /b %ERRORLEVEL%

:EchoAndExec
  echo %_vspgINDENTS%[%batfilenam%] EXEC: %*
  call %*
exit /b %ERRORLEVEL%

:EchoVar
  REM Env-var double expansion trick from: https://stackoverflow.com/a/1200871/151453
  set _Varname=%1
  for /F %%i in ('echo %_Varname%') do echo %_vspgINDENTS%[%batfilenam%] %_Varname% = !%%i!
exit /b 0

:SetErrorlevel
  REM Usage example:
  REM call :SetErrorlevel 4
exit /b %1


:CopyFilePatterns
REM Copy files of various patterns to destination directory.
REM We need this bcz Windows copy cmd only accepts one wildcard pattern per execution.
REM Param1: Source folder. (can in quotes)
REM Param2: Destination folder. (can in quotes)
REM Params remain: Each one is a pattern, like: *.exe *.dll . (can not in quotes)
  setlocal
  set AllPatterns=
  set isFileMet=false

  set DirSrc=%~1
  shift
  
  set DirDst=%~1
  shift
  
  if not exist "%DirDst%" mkdir "%DirDst"
  
:loop_CopyFilePatterns
  set pattern=%~1
  set AllPatterns=%AllPatterns% %pattern%
  
  if "%pattern%" == "" (
    REM All patterns finished. Do we really copy any files? If none, assert error.
    
    if "%isFileMet%" == "false" (
      call :Echos [VSPG-Error] No files are found by your patterns: %AllPatterns%
      exit /b 4
    ) else (
      exit /b 0
    )
  )
  
:process_pattern

  REM Prompt the user the currently processing pattern
  call "%bootsdir%\IsSubStr.bat" hasAsterisk "%pattern%" *
  call "%bootsdir%\IsSubStr.bat" hasQuesmark "%pattern%" ?
  call "%bootsdir%\IsSubStr.bat" has1 "%hasAsterisk%%hasQuesmark%" 1
  if "%has1%" == "1" (
    call :Echos Copying files matching pattern "%pattern%" ...
  )
  
  REM If %pattern% has no backslash in it, prepend %DirSrc% to make a pattern with dir-prefix.
  call "%bootsdir%\IsSubStr.bat" hasBkSlash "%pattern%" \
  if "%hasBkSlash%" == "1" (
    set dirpfx_pattern=%pattern%
  ) else (
    set dirpfx_pattern=%DirSrc%\%pattern%
  )
  
  set seefile=
  for %%g in ("%dirpfx_pattern%") do (
    set seefile=%%g
    
    REM ---- call :EchoAndExec copy "%%g" "%DirDst%"
    REM ---- Use following instead:
    call "%bootsdir%\PathSplit.bat" "!seefile!" __thisdir thisfilenam
    call "%bootsdir%\LoopExecUntilSucc.bat" #10# "%bootsdir%\vspg_copy1file.bat" "!seefile!" "%DirDst%\!thisfilenam!"
    REM
    if errorlevel 1 (
      call :Echos [ERROR] Copy file failed after multiple retries!
      exit /b 4
    )
  )
  
  if "%seefile%" == "" (
    call :Echos No files matching "%dirpfx_pattern%", no file copied.
  ) else (
    set isFileMet=true
  )
  
  shift
  goto :loop_CopyFilePatterns

REM -- End of :CopyFilePatterns

echo [VSPG-INTERNAL-ERROR] SHOULD NOT REACH HERE.
exit /b 444
