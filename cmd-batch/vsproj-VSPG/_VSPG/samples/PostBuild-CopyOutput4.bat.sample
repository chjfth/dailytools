@echo off
setlocal EnableDelayedExpansion
set batfilenam=%~n0%~x0
set batdir=%~dp0
set batdir=%batdir:~0,-1%
set _vspgINDENTS=%_vspgINDENTS%.
call :Echos START from %batdir%

REM
set BuildConf=%~1
set _BuildConf_=%1
set PlatformName=%~2
set _ExeDllDir_=%3
set ExeDllDir=%~3
set TargetName=%~4

REM == debugging purpose ==
REM call :EchoVar _BuildConf_
REM call :EchoVar BuildConf
REM call :EchoVar PlatformName
REM call :EchoVar _ExeDllDir_
REM call :EchoVar ExeDllDir
REM call :EchoVar TargetName

REM ==== Prelude Above ====

REM =========================================================================
REM This bat copies(=sync) project output(EXE/DLL etc) to your desired target dirs.
REM 
REM After duplicating your own PostBuild-SyncOutput4.bat, you should 
REM customize two things: 
REM (1) Set POSTBUILD_COPY_TO_DIRS's value to be your copying target dirs.
REM     You can list multiple target dirs, separated by spaces.
REM     For example, assign two remote machine folders for remote debugging:
REM 
REM set POSTBUILD_COPY_TO_DIRS=z:\bin "y:\bin outputs"
REM
REM (2) Tell what file patterns to copy, separate each pattern by a space.
REM     (But don't surround them with quotes.)
REM
REM set POSTBUILD_COPY_PATTERNS="%ExeDllDir%\%TargetFilenam%" "some other pattern with white-space chars"
REM or
REM set POSTBUILD_COPY_PATTERNS=*.exe *.dll
REM 
REM You can modify .bat files directly, or set them as env-vars.
REM =========================================================================

if not defined POSTBUILD_COPY_TO_DIRS (
	call :Echos POSTBUILD_COPY_TO_DIRS is empty, nothing to copy.
	exit /b 0
)

if not defined POSTBUILD_COPY_PATTERNS (
	call :Echos [ERROR] POSTBUILD_COPY_PATTERNS is empty.
	exit /b 4
)

REM For the special two vars, escape double-quotes for wrapping into a single bat-parameter.
call :PackDoubleQuotes %POSTBUILD_COPY_PATTERNS%
set __SourcePatterns__=%_vspg_dqpacked%
rem
call :PackDoubleQuotes %POSTBUILD_COPY_TO_DIRS%
set __DestDirs__=%_vspg_dqpacked%
rem call :EchoVar __SourcePatterns__ @@@@@@@@@@@@@@
rem call :EchoVar __DestDirs__       @@@@@@@@@@@@@@

set DestSubdir=__%BuildConf%\%PlatformName%

call :AgileCopy  "%ExeDllDir%"  "%__SourcePatterns__%"  "%__DestDirs__%"  "%DestSubdir%"
exit /b %ERRORLEVEL%





REM =============================
REM ====== Functions Below ======
REM =============================

:AgileCopy
REM Usage example:
REM 
REM   call :AgileCopy <SourcDir> <SourcePatterns> <DestDirs> <DestSubdir>
REM 
REM Param1: <SourceDir>
REM   The directory containing source files.
REM 
REM Param2: <SourcePatterns> 
REM   Filename or wildcard-patterns relative to <SourceDir>, separated by spaces.
REM   Each filename/pattern can have extra sub-dir prefix, e.g. foodir\*.exe .
REM   If multiple filenames/patterns given, you(the caller) need to enclose all of them 
REM   in one pair of double quotes, for example:
REM      "myprog.exe subdir\helper.dll"
REM 
REM And, if given filename/pattern itself contains spaces, you(the caller) should.
REM apply extra quoting, like this:
REM      "myprog.exe ""sub dir with spaces\helper.dll"" readme.txt"
REM 
REM Param3: <DestDirs>
REM   List of destination directories, separated by spaces. Also try to avoid
REM   have spaces in the directory itself. 
REM   Source files will be copied to each directory.
REM 
REM Param4: <DestSubdir> (optional)
REM   This is extra subdir beneath each <DestDirs>. This help you place 
REM   source files from different BuildConf/Platform into different subdirs.

  setlocal EnableDelayedExpansion
  
  call :UnpackDoubleQuotes SourceDir "%~1"
  call :UnpackDoubleQuotes SourcePatterns "%~2"
  call :UnpackDoubleQuotes DestDirs "%~3"
  call :UnpackDoubleQuotes DestSubdir "%~4"
  
  if "%DestSubdir%" == "" (
    call :Echos [ERROR] Calling AgileCopy function, missing parameters, 4 parameters required.
    exit /b 4
  )


  for %%d in (%DestDirs%) do (

	if "%DestSubdir%" == "" (
	  set d_final=%%~d
	) else (
	  set d_final=%%~d\%DestSubdir%
	)

	if not exist "!d_final!" (
		mkdir "!d_final!"
		if errorlevel 1 (
		  REM This can happen if user assigns a dir with non-existing driver letter.
		  call :Echos [ERROR] Cannot create directory "!d_final!" .
		  exit /b 4
		)
	)
	

	call "%bootsdir%\CopyFilePatterns.bat" "%SourceDir%" "!d_final!" %SourcePatterns%
	if errorlevel 1 ( 
		call :Echos [ERROR] Error occurred when copying file to "!d_final!" .
		exit /b 4 
	)
  )

exit /b 0


:Echos
  REM This function preserves %ERRORLEVEL% for the caller,
  REM and, LastError does NOT pollute the caller.
  setlocal & set LastError=%ERRORLEVEL%
  echo %_vspgINDENTS%[%batfilenam%] %*
exit /b %LastError%

:EchoAndExec
  echo %_vspgINDENTS%[%batfilenam%] EXEC: %*
  call %*
exit /b %ERRORLEVEL%

:EchoVar
  setlocal & set Varname=%~1
  call echo %_vspgINDENTS%[%batfilenam%]%~2 %Varname% = %%%Varname%%%
exit /b 0

:SetErrorlevel
  REM Usage example:
  REM call :SetErrorlevel 4
exit /b %1

:PackDoubleQuotes
  REM Take whole %* as input, replace each " with "" and return the result string.
  REM The return value is put in global var _vspg_dqpacked .
  set allparams=%*
  set _vspg_dqpacked=%allparams:"=""%
exit /b 0

:UnpackDoubleQuotes
  setlocal & set allparams=%~2
  set unpacked=%allparams:""="%
  endlocal & (set %~1=%unpacked%)
exit /b 0

