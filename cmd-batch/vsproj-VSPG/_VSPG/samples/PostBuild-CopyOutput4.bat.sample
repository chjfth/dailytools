@echo off
setlocal EnableDelayedExpansion
set batfilenam=%~n0%~x0
set batdir=%~dp0
set batdir=%batdir:~0,-1%
set _vspgINDENTS=%_vspgINDENTS%.
call :Echos START from %batdir%

REM
set BuildConf=%~1
set _BuildConf_=%1
set PlatformName=%~2
set _ExeDllDir_=%3
set ExeDllDir=%~3
set TargetName=%~4

REM == debugging purpose ==
REM call :EchoVar _BuildConf_
REM call :EchoVar BuildConf
REM call :EchoVar PlatformName
REM call :EchoVar _ExeDllDir_
REM call :EchoVar ExeDllDir
REM call :EchoVar TargetName

REM ==== Prelude Above ====

REM =========================================================================
REM This bat copies(=sync) project output(EXE/DLL etc) to your desired target dirs.
REM 
REM After duplicating your own PostBuild-SyncOutput4.bat, you should 
REM customize two things: 
REM (1) Set POSTBUILD_COPY_TO_DIRS's value to be your copying target dirs.
REM     You can list multiple target dirs, separated by spaces.
REM     For example, assign two remote machine folders for remote debugging:
REM 
REM set POSTBUILD_COPY_TO_DIRS=z:\bin "y:\bin outputs"
REM
REM (2) Tell what file patterns to copy, separate each pattern by a space.
REM     (But don't surround them with quotes.)
REM
REM set POSTBUILD_COPY_PATTERNS=%ExeDllDir%\%TargetFilenam% "some other pattern with white-space chars"
REM or
REM set POSTBUILD_COPY_PATTERNS=*.exe *.dll
REM 
REM You can modify .bat files directly, or set them as env-vars.
REM =========================================================================

if not defined POSTBUILD_COPY_TO_DIRS (
	call :Echos POSTBUILD_COPY_TO_DIRS is empty, nothing to copy.
	exit /b 0
)

if not defined POSTBUILD_COPY_PATTERNS (
	call :Echos [ERROR] POSTBUILD_COPY_PATTERNS is empty.
	exit /b 4
)

for %%d in (%POSTBUILD_COPY_TO_DIRS%) do (

	set d_final=%%~d\__%BuildConf%\%PlatformName%
	if not exist "!d_final!" ( 
		mkdir "!d_final!"
		if errorlevel 1 (
		  REM This can happen if user assigns a dir with non-existing driver letter.
		  call :Echos [ERROR] Cannot create directory "!d_final!" .
		  exit /b 4
		)
	)
	
	call "%bootsdir%\CopyFilePatterns.bat" "%ExeDllDir%" "!d_final!" %POSTBUILD_COPY_PATTERNS%
	if errorlevel 1 ( 
		call :Echos [ERROR] Error occurred when copying file to "!d_final!" .
		exit /b 4 
	)
)


exit /b 0


REM =============================
REM ====== Functions Below ======
REM =============================

:Echos
  REM This function preserves %ERRORLEVEL% for the caller,
  REM and, LastError does NOT pollute the caller.
  setlocal & set LastError=%ERRORLEVEL%
  echo %_vspgINDENTS%[%batfilenam%] %*
exit /b %LastError%

:EchoAndExec
  echo %_vspgINDENTS%[%batfilenam%] EXEC: %*
  call %*
exit /b %ERRORLEVEL%

:EchoVar
  setlocal & set Varname=%~1
  call echo %_vspgINDENTS%[%batfilenam%] %Varname% = %%%Varname%%%
exit /b 0

:SetErrorlevel
  REM Usage example:
  REM call :SetErrorlevel 4
exit /b %1


