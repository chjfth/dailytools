
# _gmu_rel2abs (): 
# Input a dir(relative or absolute), return(echo) its absolute dir.
# If the input dir is not valid or not accessible, return null string.
# This function will not change callers current working directory.
_gmu_rel2abs ()
{
	if [ "$1" = "" ]; then return 4; fi

	if cd "$1" >/dev/null; then pwd
	else return 5; fi
}

#echo "[${BASH_SOURCE}]"

# If not running interactively, don't do anything. (this makes VisualGDB happy)
[[ $- != *i* ]] && return

# Get dir of this script.
dir_qlbox="${BASH_SOURCE%/*}"
dir_qlbox=$(_gmu_rel2abs "$dir_qlbox")

alias tmuxhelp='cat "$dir_qlbox/tmuxhelp.txt"'

source "$dir_qlbox/launch_tmux_aux.sc"
	# Double-quotes are required, in case $dir_qlbox contains space char.

source "$dir_qlbox/alias.sc"

source "$dir_qlbox/misc.sc"


set -o ignoreeof
	# Disable Ctrl+D exit shell

# Set very beautiful and useful PS1 prompt for bash user:
if [ $UID != 0 ]; then PS1fmtuser='\u'; else PS1fmtuser='\[\033[1;31m\]\u\[\033[0m\]'; fi
PS1fmtcwd='[33m'
if [ $UID != 0 ]; then PS1char='$'; else PS1char='#'; fi
PS1_err_bell='$(if [ $? != 0 ];then echo -e \a; fi)'
PS1_TERM='$TERM'
PS1_DQ='$?'
_ShowOnErr1()
{
	# The input $1, is the actual value of $? from the outside world.
	if [ "$1" != 0 ]; then
		echo "ERR:$1"
	fi
	return $1
}
_ShowOnErr0()
{
	# The input $1, is the actual value of $? from the outside world.
	if [ "$1" = 0 ]; then
		echo "ERR:0"
	fi
	return $1 # relay the outside $? to _ShowOnErr0
}
_Ps1ChjPrefix()
{
	if [ "$PS1_chjprefixcmd" != "" ]; then
		echo "$(eval $PS1_chjprefixcmd) "
	fi
	
	# Relay the outside $? to caller, by returning $1 .
	# This is important trick. This is to ensure that, whenever Bash sees a '$?' inside the PS1, the '$?'
	# equals the initial $? value from outside. The "outside $?" is the $? value after the Bash user 
	# executes a shell command. For example, `ls` will produce $?=0, `ls non-exist-file` will produce $?=2 .
	return $1
}
# _ClearMyErr(){ return 0; } # [2020-11-04]no-effect on clearing inherited error
PS1_chj="\n[\[\033[1;37m\]\$(_Ps1ChjPrefix $PS1_DQ)\[\033[0m\]\[\033[32m\]`tty`($PS1_TERM) \D{%Y-%m-%d} \t \[\033[1;31m\]\$(_ShowOnErr1 $PS1_DQ)\[\033[0m\]\$(_ShowOnErr0 $PS1_DQ)]$PS1_err_bell\n[$PS1fmtuser @\h \[\033$PS1fmtcwd\w\033[0m\]]\n\[\033[1;37;44m\]$PS1char\[\033[0m\] "
PS1=$PS1_chj

# Hint for PS1_chjprefixcmd :
# User may set
#
#	PS1_chjprefixcmd='eval "echo PY-$(pyenv version-name)"'
#
# so to achieve a dynamic prefix like:
#	[PY-3.7.9 /dev/pts/5(screen-256color) 2021-04-18 13:09:43 ERR:0]
# or
#	[PY-3.9.3 /dev/pts/5(screen-256color) 2021-04-18 13:09:57 ERR:0]
